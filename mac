#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

#######################################################################
#
# Rosetta
#
#######################################################################

setup_rosetta() {
  OLDIFS=$IFS

  IFS='.' read osvers_major osvers_minor osvers_dot_version <<< "$(/usr/bin/sw_vers -productVersion)"

  # restore IFS to previous state
  IFS=$OLDIFS

  # Check to see if the Mac is reporting itself as running macOS 11
  if [[ ${osvers_major} -ge 11 ]]; then

    # Check to see if the Mac needs Rosetta installed by testing the processor
    processor=$(/usr/sbin/sysctl -n machdep.cpu.brand_string | grep -o "Intel")
  
    if [[ -n "$processor" ]]; then
      echo "$processor processor installed. No need to install Rosetta."
    else
      # Check Rosetta LaunchDaemon. If no LaunchDaemon is found,
      # perform a non-interactive install of Rosetta.    
      if [[ ! -f "/Library/Apple/System/Library/LaunchDaemons/com.apple.oahd.plist" ]]; then
          /usr/sbin/softwareupdate --install-rosetta --agree-to-license
        
          if [[ $? -eq 0 ]]; then
            echo "Rosetta has been successfully installed."
          else
            echo "Rosetta installation failed!"
            exitcode=1
          fi
    
      else
        echo "Rosetta is already installed. Nothing to do."
      fi
    fi
  else
    echo "Mac is running macOS $osvers_major.$osvers_minor.$osvers_dot_version."
    echo "No need to install Rosetta on this version of macOS."
  fi
}

#######################################################################
#
# Homebrew
#
#######################################################################


install_homebrew() {
  if ! command -v brew >/dev/null; then
    fancy_echo "Installing Homebrew ..."
      /bin/bash -c \ 
        "$(curl -fsS https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      export PATH="/usr/local/bin:$PATH"
  fi
}

configure_homebrew() {
  # shellcheck disable=SC2016
  HOMEBREW_PREFIX="/usr/local"

  if [ -d "$HOMEBREW_PREFIX" ]; then
    if ! [ -r "$HOMEBREW_PREFIX" ]; then
      sudo chown -R "$LOGNAME:admin" /usr/local
    fi
  else
    sudo mkdir "$HOMEBREW_PREFIX"
    sudo chflags norestricted "$HOMEBREW_PREFIX"
    sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
  fi

  fancy_echo "Updating Homebrew formulae ..."
  brew update --force # https://github.com/Homebrew/brew/issues/1151
  brew bundle --file=- <<EOF
  
  tap "stve/formulae"
  tap "homebrew/services"
  tap "homebrew/cask-fonts"
  tap "heroku/brew"

  # Unix
  brew "git"
  brew "openssl"
  brew "the_silver_searcher"
  brew "zsh"

  # Utilities
  brew "direnv"
  brew "exiftool"
  brew "ffmpeg"
  brew "lame"
  brew "terraform"
  brew "youtube-dl"

  # PGP
  brew "gpg2"

  # Heroku
  brew "heroku/brew/heroku"

  # GitHub
  brew "gh"

  # Image manipulation
  brew "imagemagick"

  # MacOS
  brew "mas"

  # Programming languages and package managers
  brew 'asdf'
  brew "go"
  brew "libyaml" # should come after openssl
  brew "yarn"

  # Databases
  brew "postgres", restart_service: :changed
  brew "redis", restart_service: :changed
  brew "mongodb", restart_service: :changed
  brew "memcached", restart_service: :changed
  brew "elasticsearch", restart_service: :changed

  # Database Utilities
  brew "libmemcached"

  # Personal homebrew packages
  brew "scar"

  # Applications
  cask "alfred"
  cask "appcleaner"
  cask "atom"
  cask "dropbox"
  cask "firefox"
  cask "flux"
  cask "google-chrome"
  cask "gpg-suite"
  cask "hocus-focus"
  cask "imageoptim"
  cask "iterm2"
  cask "keybase"
  cask "oversight"
  cask "paw"
  cask "quitter"
  cask "skype"
  cask "tableplus"

  # Fonts
  cask 'font-fira-code'
  cask 'font-fira-mono-for-powerline'

  # MacOS App Store
  mas "Amphetamine", id: 937984704
  mas "Aware", id: 1082170746
  mas "Battery Indicator", id: 1206020918
  mas "BetterSnapTool", id: 417375580
  mas "Byword", id: 420212497
  mas "ColorSlurp", id: 1287239339
  mas "Deliveries", id: 924726344
  mas "HazeOver", id: 430798174
  mas "Marked 2", id: 890031187
  mas "Petrify", id: 1451177988
  mas "Pixelmator", id: 407963104
  mas "Redacted", id: 984968384
  mas "Reeder", id: 880001334
  mas "Slack", id: 803453959
  mas "Soulver", id: 413965349
  mas "Textual", id: 1262957439
  mas "The Unarchiver", id: 425424353
  mas "Things3", id: 904280696
  mas "Tweetbot", id: 557168941
  mas "Xcode", id: 497799835
  mas "1Password", id: 443987910
EOF
}

setup_homebrew() {
  install_homebrew
  configure_homebrew
}

#######################################################################
#
# ASDF
#
#######################################################################

update_shell() {
  local shell_path
  shell_path="$(which zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

setup_zshell() {
  local shell_path="$SHELL"

  case "$shell_path" in
  */zsh)
    if [ "$shell_path" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
  esac
}


#######################################################################
#
# ASDF
#
#######################################################################

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf latest "$language")"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  else
    asdf shell "$language" "$version"
  fi
}

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

setup_asdf() {
  ASDF_DIR=$(brew --prefix asdf)
  source "$ASDF_DIR/asdf.sh"
  add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
  add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
}

setup_ruby() {
  install_asdf_language "ruby"

  gem update --system
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))
}

setup_nodejs() {
  bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring" > /dev/null 2>&1

  install_asdf_language "nodejs"
}

#######################################################################
#
# Setup
#
#######################################################################

fancy_echo "Checking for and installing Rosetta..."
setup_rosetta

fancy_echo "Setup Homebrew..."
setup_homebrew

fancy_echo "Setup zsh..."
setup_zshell

fancy_echo "Setup asdf..."
setup_asdf

fancy_echo "Setup Nodejs..."
setup_nodejs

fancy_echo "Setup Ruby..."
setup_ruby

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi

# set default project directory
mkdir -p "$HOME/Projects"

fancy_echo "Done! ðŸ’«"
