#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

fail() {
  fancy_echo "$1"
  exit 1
}

apple_m1() {
  sysctl -n machdep.cpu.brand_string | grep "Apple M1"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -euo pipefail

#######################################################################
#
# Rosetta
#
#######################################################################

setup_rosetta() {
  if apple_m1; then
    # Check Rosetta LaunchDaemon. If no LaunchDaemon is found,
    # perform a non-interactive install of Rosetta.    
    if [[ ! -f "/Library/Apple/System/Library/LaunchDaemons/com.apple.oahd.plist" ]]; then
      /usr/sbin/softwareupdate --install-rosetta --agree-to-license
    
      if [[ $? -eq 0 ]]; then
        fancy_echo "Rosetta has been successfully installed."
      else
        fail "Rosetta installation failed!"
      fi
    else
      fancy_echo "Rosetta is already installed. Nothing to do."
    fi
  fi
}

#######################################################################
#
# Homebrew
#
#######################################################################


install_homebrew() {
  if ! command -v brew >/dev/null; then
    fancy_echo "Installing Homebrew ..."
      /bin/bash -c \ 
        "$(curl -fsS https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    if apple_m1; then
      export PATH="/usr/local/bin:$PATH"
    else
      source "$HOMEBREW_PREFIX/bin/brew shellenv"
      export PATH="/opt/homebrew/bin:$PATH"
    fi
  else
    fancy_echo "Homebrew already installed. Updating Homebrew ..."
    brew update
  fi
}

configure_homebrew() {
  fancy_echo "Verifying the Homebrew installation ..."
  if brew doctor; then
    fancy_echo "Your Homebrew installation is good to go."
  else
    fancy_echo "Your Homebrew installation reported some errors or warnings."
    fancy_echo "Review the Homebrew messages to see if any action is needed."
  fi

  fancy_echo "Installing formulas and casks from the Brewfile ..."
  if brew bundle --file="$HOME/Brewfile"; then
    fancy_echo "All formulas and casks were installed successfully."
  else
    fancy_echo "Some formulas or casks failed to install."
    fancy_echo "This is usually due to one of the Mac apps being already installed,"
    fancy_echo "in which case, you can ignore these errors."
  fi
}

install_apps() {
  fancy_echo "Installing App Store apps ..."
    if brew bundle --file="$HOME/Masfile"; then
    fancy_echo "All apps were installed successfully."
  else
    fancy_echo "Some apps failed to install."
  fi
}

setup_homebrew() {
  install_homebrew
  configure_homebrew
  install_apps
}

#######################################################################
#
# ASDF
#
#######################################################################

update_shell() {
  local shell_path
  shell_path="$(which zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

setup_zshell() {
  local shell_path="$SHELL"

  case "$shell_path" in
  */zsh)
    if [ "$shell_path" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
  esac
}


#######################################################################
#
# ASDF
#
#######################################################################

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf latest "$language")"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  else
    asdf shell "$language" "$version"
  fi
}

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

setup_asdf() {
  ASDF_DIR=$(brew --prefix asdf)
  source "$ASDF_DIR/asdf.sh"
  add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
  add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
}

setup_ruby() {
  install_asdf_language "ruby"

  gem update --system
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))
}

setup_nodejs() {
  bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring" > /dev/null 2>&1

  install_asdf_language "nodejs"
}

#######################################################################
#
# Setup
#
#######################################################################

fancy_echo "Checking for and installing Rosetta..."
setup_rosetta

fancy_echo "Setup Homebrew..."
setup_homebrew

fancy_echo "Setup zsh..."
setup_zshell

fancy_echo "Setup asdf..."
setup_asdf

fancy_echo "Setup Nodejs..."
setup_nodejs

fancy_echo "Setup Ruby..."
setup_ruby

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi

# set default project directory
mkdir -p "$HOME/Projects"

fancy_echo "Done! ðŸ’«"
